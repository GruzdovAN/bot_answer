#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
"""

import asyncio
import os
from datetime import datetime, timedelta
from dotenv import load_dotenv
from telethon import TelegramClient
from src.parsers.simple_parser import SimpleParser
from src.database.clickhouse_client import ClickHouseClient

load_dotenv()

async def test_period_scrape():
    client = TelegramClient(
        'sessions/reader',
        api_id=os.getenv('API_ID_TG'),
        api_hash=os.getenv('API_HASH_TG')
    )
    
    try:
        await client.start()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª
        entity = await client.get_entity('@datasciencejobs')
        print(f"üìã –ö–∞–Ω–∞–ª: {entity.title}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä –∏ ClickHouse –∫–ª–∏–µ–Ω—Ç
        parser = SimpleParser('job_parser')
        clickhouse = ClickHouseClient()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä –∑–∞ —Ä–∞–∑–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã
        periods = [1, 3, 7]  # –¥–Ω–∏
        
        for days in periods:
            print(f"\nüìÖ –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π...")
            
            # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞
            start_date = datetime.now() - timedelta(days=days)
            print(f"   –ü–µ—Ä–∏–æ–¥: —Å {start_date.strftime('%Y-%m-%d %H:%M:%S')} –¥–æ —Å–µ–π—á–∞—Å")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–µ—Ä–∏–æ–¥
            messages = []
            async for message in client.iter_messages(
                entity, 
                limit=50,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞
                offset_date=start_date
            ):
                messages.append(message)
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ {message.id} –æ—Ç {message.date}: {message.text[:50] if message.text else '–ú–µ–¥–∏–∞'}...")
            
            print(f"‚úÖ –ó–∞ {days} –¥–Ω–µ–π –Ω–∞–π–¥–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if messages:
                # –ü–∞—Ä—Å–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                print("üîÑ –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è...")
                parsed_messages = []
                for message in messages:
                    parsed = parser.parse_message(message)
                    parsed['message_id'] = message.id
                    parsed['channel_username'] = '@datasciencejobs'
                    parsed['date'] = message.date
                    parsed['views'] = getattr(message, 'views', 0)
                    parsed['forwards'] = getattr(message, 'forwards', 0)
                    parsed_messages.append(parsed)
                
                print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ClickHouse...")
                clickhouse.insert_messages(parsed_messages)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(parsed_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {days} –¥–Ω–µ–π!")
            else:
                print(f"‚ö†Ô∏è –ó–∞ {days} –¥–Ω–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()

if __name__ == "__main__":
    asyncio.run(test_period_scrape())
