#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ Telegram
"""

import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞...")
    
    # –¢–µ—Å—Ç 1: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–∞–Ω–∞–ª–æ–≤...")
    try:
        from src.core.channel_manager import ChannelManager
        cm = ChannelManager()
        channels = cm.get_enabled_channels()
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:")
        for ch in channels:
            print(f"   - {ch.username} ({ch.parser_type}, {ch.days_back} –¥–Ω–µ–π)")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
    
    # –¢–µ—Å—Ç 2: –ü–∞—Ä—Å–µ—Ä
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä...")
    try:
        from src.parsers.simple_parser import SimpleParser
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        class MockMessage:
            def __init__(self, text):
                self.text = text
        
        # –¢–µ—Å—Ç job_parser
        parser = SimpleParser('job_parser')
        test_msg = MockMessage("Senior Python Developer at Google #python #ml @google https://example.com")
        parsed = parser.parse_message(test_msg)
        
        print("‚úÖ Job parser —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   - –•–µ—à—Ç–µ–≥–∏: {parsed['hashtags']}")
        print(f"   - –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {parsed['mentions']}")
        print(f"   - –°—Å—ã–ª–∫–∏: {parsed['links']}")
        print(f"   - –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {parsed['technologies']}")
        
        # –¢–µ—Å—Ç news_parser
        parser = SimpleParser('news_parser')
        test_msg = MockMessage("Google announces new AI features #AI #Google @Google")
        parsed = parser.parse_message(test_msg)
        
        print("‚úÖ News parser —Ä–∞–±–æ—Ç–∞–µ—Ç:")
        print(f"   - –•–µ—à—Ç–µ–≥–∏: {parsed['hashtags']}")
        print(f"   - –£–ø–æ–º–∏–Ω–∞–Ω–∏—è: {parsed['mentions']}")
        print(f"   - –ö–æ–º–ø–∞–Ω–∏–∏: {parsed['companies']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ: {e}")
    
    # –¢–µ—Å—Ç 3: ClickHouse –∫–ª–∏–µ–Ω—Ç
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º ClickHouse –∫–ª–∏–µ–Ω—Ç...")
    try:
        from src.database.clickhouse_client import ClickHouseClient
        ch = ClickHouseClient()
        print("‚úÖ ClickHouse –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç –≤—Å—Ç–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        test_data = [{
            'message_id': 12345,
            'channel_username': '@test_channel',
            'date': '2024-09-16 20:00:00',
            'text': 'Test message for universal scraper',
            'views': 100,
            'forwards': 5,
            'hashtags': ['#test', '#universal'],
            'mentions': ['@test'],
            'links': ['https://example.com'],
            'technologies': ['python'],
            'companies': []
        }]
        
        ch.insert_messages(test_data)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ClickHouse!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ ClickHouse –∫–ª–∏–µ–Ω—Ç–µ: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    required_vars = ['API_ID_TG', 'API_HASH_TG', 'CLICKHOUSE_PASSWORD']
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {'*' * min(len(value), 10)}...")
        else:
            print(f"‚ùå {var}: –Ω–µ –∑–∞–¥–∞–Ω–∞")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    test_components()
