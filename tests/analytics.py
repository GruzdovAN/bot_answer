#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import requests
import os
import sys
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class SimpleAnalytics:
    def __init__(self):
        self.host = os.getenv('CLICKHOUSE_HOST', 'localhost')
        self.port = os.getenv('CLICKHOUSE_PORT', '8123')
        self.user = os.getenv('CLICKHOUSE_USER', 'clickhouse_admin')
        self.password = os.getenv('CLICKHOUSE_PASSWORD')
        self.database = os.getenv('CLICKHOUSE_DB', 'telegram_analytics')
        
        self.base_url = f"http://{self.host}:{self.port}"
        self.auth = (self.user, self.password) if self.user and self.password else None
    
    def execute_query(self, query):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        response = requests.get(
            self.base_url,
            params={'query': query, 'database': self.database},
            auth=self.auth
        )
        
        if response.status_code == 200:
            return response.text.strip().split('\n')
        else:
            raise Exception(f"ClickHouse error: {response.text}")
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        total = self.execute_query("SELECT count() FROM telegram_messages")[0]
        print(f"   –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        channels = self.execute_query("SELECT uniq(channel_username) FROM telegram_messages")[0]
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {channels}")
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        views = self.execute_query("SELECT sum(views) FROM telegram_messages")[0]
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {views}")
    
    def get_channel_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:")
        
        query = """
        SELECT 
            channel_username,
            count() as messages,
            sum(views) as total_views,
            avg(views) as avg_views
        FROM telegram_messages 
        GROUP BY channel_username
        ORDER BY messages DESC
        """
        
        results = self.execute_query(query)
        for line in results:
            if line:
                parts = line.split('\t')
                if len(parts) >= 4:
                    channel, messages, total_views, avg_views = parts
                    print(f"   {channel}: {messages} —Å–æ–æ–±—â–µ–Ω–∏–π, {total_views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ (—Å—Ä. {avg_views})")
    
    def get_top_hashtags(self, limit=10):
        """–¢–æ–ø —Ö–µ—à—Ç–µ–≥–æ–≤"""
        print(f"\nüè∑Ô∏è –¢–æ–ø {limit} —Ö–µ—à—Ç–µ–≥–æ–≤:")
        
        query = f"""
        SELECT 
            hashtag,
            count() as mentions
        FROM (
            SELECT arrayJoin(hashtags) as hashtag
            FROM telegram_messages 
        )
        GROUP BY hashtag
        ORDER BY mentions DESC
        LIMIT {limit}
        """
        
        results = self.execute_query(query)
        for line in results:
            if line:
                parts = line.split('\t')
                if len(parts) >= 2:
                    hashtag, mentions = parts
                    print(f"   {hashtag}: {mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    def get_top_technologies(self, limit=10):
        """–¢–æ–ø —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"""
        print(f"\nüíª –¢–æ–ø {limit} —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π:")
        
        query = f"""
        SELECT 
            technology,
            count() as mentions
        FROM (
            SELECT arrayJoin(technologies) as technology
            FROM telegram_messages 
        )
        GROUP BY technology
        ORDER BY mentions DESC
        LIMIT {limit}
        """
        
        results = self.execute_query(query)
        for line in results:
            if line:
                parts = line.split('\t')
                if len(parts) >= 2:
                    technology, mentions = parts
                    print(f"   {technology}: {mentions} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    
    def get_recent_messages(self, limit=5):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π:")
        
        query = f"""
        SELECT 
            channel_username,
            date,
            text,
            views
        FROM telegram_messages 
        ORDER BY date DESC
        LIMIT {limit}
        """
        
        results = self.execute_query(query)
        for line in results:
            if line:
                parts = line.split('\t')
                if len(parts) >= 4:
                    channel, date, text, views = parts
                    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
                    short_text = text[:100] + "..." if len(text) > 100 else text
                    print(f"   [{channel}] {date}: {short_text} ({views} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤")
    print("=" * 50)
    
    try:
        analytics = SimpleAnalytics()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        analytics.get_statistics()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
        analytics.get_channel_stats()
        
        # –¢–æ–ø —Ö–µ—à—Ç–µ–≥–∏
        analytics.get_top_hashtags()
        
        # –¢–æ–ø —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏
        analytics.get_top_technologies()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        analytics.get_recent_messages()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
