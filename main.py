"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞
"""
import asyncio
import sys
import os
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.bot_manager import bot_manager
from src.config.logging_config import setup_logging, get_logger

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
setup_logging(level="INFO", log_to_file=True)
logger = get_logger("main")


def parse_arguments():
    """–ü–∞—Ä—Å–∏—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(
        description="Telegram –±–æ—Ç-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python main.py                    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä
  python main.py --bot smart        # –£–º–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
  python main.py --bot simple       # –ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
  python main.py --bot group        # –ì—Ä—É–ø–ø–æ–≤–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫
  python main.py --list             # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–æ—Ç—ã
  python main.py --list-groups      # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã
        """
    )
    
    parser.add_argument(
        '--bot', '-b',
        choices=['smart', 'simple', 'group'],
        help='–¢–∏–ø –±–æ—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞'
    )
    
    parser.add_argument(
        '--list', '-l',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ—Ç–æ–≤'
    )
    
    parser.add_argument(
        '--list-groups', '-g',
        action='store_true',
        help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø (–¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –±–æ—Ç–∞)'
    )
    
    return parser.parse_args()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    args = parse_arguments()
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤
    if args.list:
        print("\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –±–æ—Ç–æ–≤:")
        bot_manager.list_available_bots()
        return
    
    # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
    if args.list_groups:
        print("\nüîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø...")
        try:
            from src.bots.group_responder import GroupResponder
            bot = GroupResponder()
            await bot.start()
            await bot.list_available_groups()
            await bot.stop()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        return
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–æ—Ç
    if args.bot:
        logger.info(f"–ó–∞–ø—É—Å–∫ {args.bot} –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
        await bot_manager.run_bot(args.bot)
        return
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞-–∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
    print("\nü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –±–æ—Ç–æ–≤:")
    bot_manager.list_available_bots()
    
    while True:
        try:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ—Ç–∞:")
            print("1. Smart Responder (—É–º–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫)")
            print("2. Simple Responder (–ø—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫)")
            print("3. Group Responder (–≥—Ä—É–ø–ø–æ–≤–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫)")
            print("0. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (0-3): ").strip()
            
            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return
            elif choice == '1':
                logger.info("–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
                await bot_manager.run_bot('smart')
                break
            elif choice == '2':
                logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
                await bot_manager.run_bot('simple')
                break
            elif choice == '3':
                logger.info("–ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
                await bot_manager.run_bot('group')
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                
        except KeyboardInterrupt:
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            return


async def run_smart_responder():
    """–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
    await bot_manager.run_bot('smart')


async def run_simple_responder():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
    await bot_manager.run_bot('simple')


async def run_group_responder():
    """–ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞")
    await bot_manager.run_bot('group')


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    try:
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å event loop (Jupyter), –∏—Å–ø–æ–ª—å–∑—É–µ–º await
        loop = asyncio.get_running_loop()
        # –í Jupyter —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É:
        # await run_smart_responder()
        # await run_simple_responder()
        # await run_group_responder()
        # await main()
    except RuntimeError:
        # –ï—Å–ª–∏ –Ω–µ—Ç event loop (–æ–±—ã—á–Ω—ã–π Python), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        asyncio.run(main())