"""
–ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
"""

import asyncio
import logging
from typing import Dict, Any
import requests

class NotificationClient:
    def __init__(self, bot_token: str, notification_chat_id: str = "@gruzdovan"):
        self.bot_token = bot_token
        self.notification_chat_id = notification_chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}"
        self.logger = logging.getLogger(__name__)
    
    async def send_new_message_notification(self, message_data: Dict[str, Any], llm_result: Dict[str, Any] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ"""
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_text = self._format_notification(message_data, llm_result)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self._send_message(notification_text)
            
            self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {self.notification_chat_id}")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    def _format_notification(self, message_data: Dict[str, Any], llm_result: Dict[str, Any] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        channel_title = message_data.get('channel_title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª')
        channel_username = message_data.get('channel_username', 'N/A')
        message_text = message_data.get('text', '')
        
        # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        if len(message_text) > 200:
            message_text = message_text[:200] + "..."
        
        notification = f"üîî **–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Å—Ç–∏–Ω–≥–µ**\n\n"
        notification += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_title}\n"
        notification += f"üîó **Username:** {channel_username}\n\n"
        notification += f"üìù **–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{message_text}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ LLM –∞–Ω–∞–ª–∏–∑–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if llm_result and llm_result.get('success'):
            extracted_data = llm_result.get('extracted_data', {})
            if extracted_data:
                notification += "ü§ñ **LLM –ê–Ω–∞–ª–∏–∑:**\n"
                
                # –¢–∏–ø –∫–∞—Å—Ç–∏–Ω–≥–∞
                casting_type = extracted_data.get('casting_type', 'N/A')
                notification += f"üé¨ –¢–∏–ø: {casting_type}\n"
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–µ—Ä–æ–≤
                actors = extracted_data.get('actors', [])
                if actors:
                    notification += f"üë• –ê–∫—Ç–µ—Ä–æ–≤: {len(actors)}\n"
                
                # –õ–æ–∫–∞—Ü–∏—è
                location = extracted_data.get('location', 'N/A')
                if location != 'N/A':
                    notification += f"üìç –õ–æ–∫–∞—Ü–∏—è: {location}\n"
                
                # –û–ø–ª–∞—Ç–∞
                payment = extracted_data.get('payment', 'N/A')
                if payment != 'N/A':
                    notification += f"üí∞ –û–ø–ª–∞—Ç–∞: {payment}\n"
                
                notification += "\n"
        else:
            notification += "‚ö†Ô∏è LLM –∞–Ω–∞–ª–∏–∑ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω\n\n"
        
        notification += f"‚è∞ –í—Ä–µ–º—è: {message_data.get('date', 'N/A')}"
        
        return notification
    
    async def _send_message(self, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
        url = f"{self.base_url}/sendMessage"
        
        payload = {
            'chat_id': self.notification_chat_id,
            'text': text,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        loop = asyncio.get_event_loop()
        response = await loop.run_in_executor(
            None, 
            lambda: requests.post(url, json=payload, timeout=10)
        )
        
        if response.status_code != 200:
            raise Exception(f"Telegram API error: {response.text}")
    
    async def send_error_notification(self, error_message: str, channel_info: str = ""):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            text = f"‚ùå **–û—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤**\n\n"
            text += f"üîç **–î–µ—Ç–∞–ª–∏:** {error_message}\n"
            if channel_info:
                text += f"üì∫ **–ö–∞–Ω–∞–ª:** {channel_info}\n"
            text += f"‚è∞ **–í—Ä–µ–º—è:** {asyncio.get_event_loop().time()}"
            
            await self._send_message(text)
            self.logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        pass
