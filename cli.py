#!/usr/bin/env python3
"""
CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram Bot –ø—Ä–æ–µ–∫—Ç–æ–º
"""

import asyncio
import os
import sys
import click
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

@click.group()
def root():
    """
    CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram Bot –ø—Ä–æ–µ–∫—Ç–æ–º
    
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    - scraper: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∞–ø–µ—Ä–æ–º
    - bot: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º  
    - system: —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    """

@root.group()
def scraper():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫—Ä–∞–ø–µ—Ä–æ–º"""
    pass

@scraper.command()
def test():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∫—Ä–∞–ø–µ—Ä–∞"""
    click.echo("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∫—Ä–∞–ø–µ—Ä–∞...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'tests/test_components.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@scraper.command()
def check():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–∞"""
    click.echo("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–Ω–∞–ª–∞...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'tests/check_channel.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@scraper.command()
def sessions():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram —Å–µ—Å—Å–∏–π"""
    click.echo("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram —Å–µ—Å—Å–∏–π...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'scripts/check_sessions.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–π: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@scraper.command()
def simple():
    """–ü—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    click.echo("üì• –ü—Ä–æ—Å—Ç–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'tests/simple_scraper.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@scraper.command()
@click.option('--session', is_flag=True, help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é')
def run(session):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫—Ä–∞–ø–µ—Ä"""
    if session:
        click.echo("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π...")
        script = 'scripts/run_scraper_with_session.py'
    else:
        click.echo("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∞–ø–µ—Ä–∞...")
        script = 'scripts/run_scraper.py'
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, script], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –°–∫—Ä–∞–ø–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∞–ø–µ—Ä–∞: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@scraper.command()
def analytics():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
    click.echo("üìä –ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'tests/analytics.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∫–∞–∑–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@scraper.command()
def test_castings():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings"""
    click.echo("üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'quick_castings_test.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@scraper.command()
@click.option('--days', default=7, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π')
@click.option('--limit', default=50, help='–õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª')
def read_castings(days, limit):
    """–ß–∏—Ç–∞—Ç—å –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ @castings"""
    click.echo(f"üìÅ –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings...")
    click.echo(f"–ü–µ—Ä–∏–æ–¥: {days} –¥–Ω–µ–π –Ω–∞–∑–∞–¥, –ª–∏–º–∏—Ç: {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª")
    try:
        import subprocess
        import os
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        temp_script = f"""
import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scripts.read_castings_folder import CastingsFolderReader

async def main():
    reader = CastingsFolderReader()
    try:
        await reader.start()
        result = await reader.read_all_castings_channels(days_back={days}, limit_per_channel={limit})
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ß–¢–ï–ù–ò–Ø –ö–ê–ù–ê–õ–û–í –ò–ó –ü–ê–ü–ö–ò @CASTINGS")
        print("="*50)
        
        print(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {{result['total_channels']}}")
        print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {{result['total_messages']}}")
        print(f"–î–∞—Ç–∞ —á—Ç–µ–Ω–∏—è: {{result['read_date']}}")
        print(f"–ü–µ—Ä–∏–æ–¥: {{result['days_back']}} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        print(f"–õ–∏–º–∏—Ç –Ω–∞ –∫–∞–Ω–∞–ª: {{result['limit_per_channel']}} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        all_messages = []
        for channel_data in result['channels']:
            all_messages.extend(channel_data['messages'])
        
        if all_messages:
            print(f"\\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {{len(all_messages)}} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            saved = await reader.save_to_database(all_messages)
            if saved:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ClickHouse")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if result['channels']:
            print(f"\\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤...")
            channels_info = [ch['channel_info'] for ch in result['channels']]
            config_updated = reader.update_channels_config(channels_info)
            if config_updated:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        
    finally:
        await reader.stop()

if __name__ == '__main__':
    asyncio.run(main())
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
        temp_file = 'temp_castings_reader.py'
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(temp_script)
        
        try:
            result = subprocess.run([sys.executable, temp_file], 
                                  capture_output=True, text=True, check=True)
            click.echo(result.stdout)
            click.echo("‚úÖ –ß—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_file):
                os.remove(temp_file)
                
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")
    except Exception as e:
        click.echo(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

@root.group()
def bot():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º"""
    pass

@bot.command()
def run():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞"""
    click.echo("ü§ñ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'main.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@bot.command()
def group_responder():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–≤–µ—Ç—á–∏–∫"""
    click.echo("üë• –ó–∞–ø—É—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—á–∏–∫–∞...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'scripts/run_group_responder.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç—á–∏–∫–∞: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@bot.command()
def docker():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ Docker"""
    click.echo("üê≥ –ó–∞–ø—É—Å–∫ –≤ Docker...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'scripts/main_docker.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ Docker –∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤ Docker: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@root.group()
def system():
    """–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"""
    pass

@system.command()
def install():
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    click.echo("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    try:
        import subprocess
        result = subprocess.run(['bash', '-c', 'source venv/bin/activate && pip install -r requirements.txt'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@system.command()
def docker_up():
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    click.echo("üê≥ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    try:
        import subprocess
        result = subprocess.run(['docker-compose', 'up', '-d'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@system.command()
def docker_down():
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"""
    click.echo("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    try:
        import subprocess
        result = subprocess.run(['docker-compose', 'down'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@system.command()
def logs():
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
    click.echo("üìã –ü–æ–∫–∞–∑ –ª–æ–≥–æ–≤...")
    try:
        import subprocess
        result = subprocess.run(['docker-compose', 'logs', '-f'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ª–æ–≥–æ–≤: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@system.command()
def status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    click.echo("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
    try:
        import subprocess
        result = subprocess.run(['docker-compose', 'ps'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–∫–∞–∑–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@system.command()
def database():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ClickHouse"""
    click.echo("üóÑÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ClickHouse...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'scripts/manage_database.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

@system.command()
def clean_duplicates():
    """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ClickHouse"""
    click.echo("üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ ClickHouse...")
    try:
        import subprocess
        result = subprocess.run([sys.executable, 'scripts/clean_duplicates.py'], 
                              capture_output=True, text=True, check=True)
        click.echo(result.stdout)
        click.echo("‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        click.echo(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π: {e}")
        if e.stderr:
            click.echo(f"–û—à–∏–±–∫–∞: {e.stderr}")

if __name__ == '__main__':
    root()