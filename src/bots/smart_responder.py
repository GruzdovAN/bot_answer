"""
–£–º–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
"""
import asyncio
from telethon import events
from .base_bot import BaseBot
from ..config.settings import config
from ..config.logging_config import get_logger

logger = get_logger("smart_responder")


class SmartResponder(BaseBot):
    """–£–º–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    
    def __init__(self):
        super().__init__("smart_auto_responder")
        self.response_rules = self._get_response_rules()
    
    def _get_response_rules(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
        return [
            {
                'keywords': ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', '—á—Ç–æ –Ω–æ–≤–æ–≥–æ'],
                'response': "üòä –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –†–∞–±–æ—Ç–∞—é, –º–æ–Ω–∏—Ç–æ—Ä—é —Å–æ–æ–±—â–µ–Ω–∏—è. –ê —É —Ç–µ–±—è –∫–∞–∫ –¥–µ–ª–∞?",
                'priority': 1
            },
            {
                'keywords': ['–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏', '–Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å'],
                'response': "üÜò –ö–æ–Ω–µ—á–Ω–æ –ø–æ–º–æ–≥—É! –û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?",
                'priority': 2
            },
            {
                'keywords': ['–≤—Ä–µ–º—è', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏'],
                'response': f"üïê –°–µ–π—á–∞—Å {asyncio.get_event_loop().time():.0f} —Å–µ–∫—É–Ω–¥ —Å –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞!",
                'priority': 1
            },
            {
                'keywords': ['—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'thanks'],
                'response': "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!",
                'priority': 1
            },
            {
                'keywords': ['–ø—Ä–∏–≤–µ—Ç', 'hello', 'hi', '–∫—É'],
                'response': "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∑–¥–µ—Å—å, —Å–ª–µ–∂—É –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏!",
                'priority': 1
            },
            {
                'keywords': ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', 'bye'],
                'response': "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –ë—É–¥—É –∂–¥–∞—Ç—å –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!",
                'priority': 1
            }
        ]
    
    def _find_best_rule(self, text: str):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ª—É—á—à–µ–µ –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            dict or None: –õ—É—á—à–µ–µ –ø—Ä–∞–≤–∏–ª–æ –∏–ª–∏ None
        """
        text_lower = text.lower()
        
        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º)
        for rule in sorted(self.response_rules, key=lambda x: x['priority']):
            if any(keyword in text_lower for keyword in rule['keywords']):
                return rule
        
        return None
    
    def _get_matched_keyword(self, text: str, rule: dict) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ –ø—Ä–∞–≤–∏–ª–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            rule: –ü—Ä–∞–≤–∏–ª–æ –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            str: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        """
        text_lower = text.lower()
        for keyword in rule['keywords']:
            if keyword in text_lower:
                return keyword
        return rule['keywords'][0]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not await self.start():
            return
        
        logger.info(f"–ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è {config.CHANNEL_USERNAME}")
        
        @self.reader_client.on(events.NewMessage(chats=config.CHANNEL_USERNAME))
        async def smart_response_handler(event):
            message = event.message
            text = message.text or ""
            
            if not text.strip():
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            if message.sender_id is not None:
                try:
                    bot_me = await self.bot_client.get_me()
                    if message.sender_id == bot_me.id:
                        logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞: {text}")
                        return
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            message_data = {
                'telegram_id': message.id,
                'user_id': message.sender_id,
                'username': getattr(message.sender, 'username', None) if message.sender else None,
                'first_name': getattr(message.sender, 'first_name', None) if message.sender else None,
                'last_name': getattr(message.sender, 'last_name', None) if message.sender else None,
                'is_bot': getattr(message.sender, 'bot', False) if message.sender else False,
                'text': text,
                'message_type': 'text',
                'is_bot_response': False,
                'raw_data': self._safe_serialize_message(message)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message_db_id = self.save_message_to_db(message_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats()
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –ø—Ä–∞–≤–∏–ª–æ
            best_rule = self._find_best_rule(text)
            
            if best_rule:
                start_time = asyncio.get_event_loop().time()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                success = await self.send_response(best_rule['response'])
                response_time = int((asyncio.get_event_loop().time() - start_time) * 1000)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    matched_keyword = self._get_matched_keyword(text, best_rule)
                    self.stats['keywords_found'][matched_keyword] = self.stats['keywords_found'].get(matched_keyword, 0) + 1
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    if message_db_id:
                        self.save_bot_response_to_db(
                            original_message_id=message_db_id,
                            response_text=best_rule['response'],
                            response_type='smart',
                            trigger_keyword=matched_keyword,
                            response_time_ms=response_time,
                            is_successful=True
                        )
                    
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{self.stats['total_messages']}")
                    logger.info(f"   –¢–µ–∫—Å—Ç: {text}")
                    logger.info(f"   –û—Ç–≤–µ—Ç: {best_rule['response']}")
                    logger.info(f"   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stats['responses_sent']}/{self.stats['total_messages']} –æ—Ç–≤–µ—Ç–æ–≤")
                    logger.info(f"   –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}–º—Å")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if message_db_id:
                        self.save_bot_response_to_db(
                            original_message_id=message_db_id,
                            response_text=best_rule['response'],
                            response_type='smart',
                            trigger_keyword=matched_keyword,
                            response_time_ms=response_time,
                            is_successful=False,
                            error_message="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
                        )
            else:
                # –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{self.stats['total_messages']} (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞)")
                logger.debug(f"   –¢–µ–∫—Å—Ç: {text[:50]}{'...' if len(text) > 50 else ''}")
        
        logger.info("–£–º–Ω—ã–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        logger.info(f"–ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑: {config.PHONE_NUMBER}")
        if config.USE_USER_ACCOUNT:
            logger.info("–û—Ç–≤–µ—á–∞–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            logger.info(f"–û—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {config.BOT_TOKEN[:10]}...")
        
        await self.run_until_disconnected()
