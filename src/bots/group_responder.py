"""
–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GROUP_NAME
"""
import asyncio
import os
from telethon import events
from .base_bot import BaseBot
from ..config.settings import config
from ..config.logging_config import get_logger
from ..database.database import db_manager
from ..utils.permissions import check_bot_permissions

logger = get_logger("group_responder")


class GroupResponder(BaseBot):
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø—ã —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GROUP_NAME"""
    
    def __init__(self):
        super().__init__("group_auto_responder")
        self.responses = self._get_responses()
        self.start_time = None  # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        self.group_name = os.getenv('GROUP_NAME')
        
        if not self.group_name:
            logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GROUP_NAME –Ω–µ –∑–∞–¥–∞–Ω–∞!")
            raise ValueError("GROUP_NAME environment variable is required")
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç GROUP_NAME
        self._validate_group_name()
    
    def _validate_group_name(self):
        """–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç GROUP_NAME"""
        if not self.group_name:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        valid_formats = []
        
        # –§–æ—Ä–º–∞—Ç —Å @
        if self.group_name.startswith('@'):
            valid_formats.append("–ø—É–±–ª–∏—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å @")
        # –ß–∏—Å–ª–æ–≤–æ–π ID (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100)
        elif self.group_name.startswith('-100') and self.group_name[4:].isdigit():
            valid_formats.append("–ø—Ä–∏–≤–∞—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Å —á–∏—Å–ª–æ–≤—ã–º ID")
        # –û–±—ã—á–Ω–æ–µ –∏–º—è –±–µ–∑ @
        elif self.group_name.replace('_', '').replace('.', '').isalnum():
            valid_formats.append("–∏–º—è –≥—Ä—É–ø–ø—ã –±–µ–∑ @")
        else:
            logger.warning(f"–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç GROUP_NAME: '{self.group_name}'")
            logger.warning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
            logger.warning("- @group_username (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø)")
            logger.warning("- -1001234567890 (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø)")
            logger.warning("- group_username (–±–µ–∑ @)")
        
        if valid_formats:
            logger.info(f"–§–æ—Ä–º–∞—Ç GROUP_NAME —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫: {valid_formats[0]}")
    
    async def list_available_groups(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø/—á–∞—Ç–æ–≤"""
        try:
            logger.info("–ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø –∏ —á–∞—Ç–æ–≤...")
            dialogs = await self.reader_client.get_dialogs()
            
            groups = []
            for dialog in dialogs:
                if hasattr(dialog.entity, 'megagroup') or hasattr(dialog.entity, 'broadcast'):
                    groups.append({
                        'title': getattr(dialog.entity, 'title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'username': getattr(dialog.entity, 'username', None),
                        'id': dialog.entity.id,
                        'type': 'supergroup' if hasattr(dialog.entity, 'megagroup') else 'channel'
                    })
            
            if groups:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(groups)} –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤:")
                for i, group in enumerate(groups, 1):
                    username_str = f" (@{group['username']})" if group['username'] else ""
                    logger.info(f"{i}. {group['title']}{username_str} (ID: {group['id']})")
            else:
                logger.warning("–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—ã.")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
    
    def _get_responses(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
        return {
            '–ø—Ä–∏–≤–µ—Ç': "üëã –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –≥—Ä—É–ø–ø—ã!",
            '–∫–∞–∫ –¥–µ–ª–∞': "üòä –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É –≤–∞—Å –∫–∞–∫ –¥–µ–ª–∞?",
            '–ø–æ–º–æ—â—å': "üÜò –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≥—Ä—É–ø–ø–µ?",
            '—Å–ø–∞—Å–∏–±–æ': "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –ø–æ–º–æ—á—å!",
            '–ø–æ–∫–∞': "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è –≤—Å–µ–º!",
            '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å': "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥—Ä—É–ø–ø—É!",
            '–ø—Ä–∞–≤–∏–ª–∞': "üìã –ü—Ä–∞–≤–∏–ª–∞ –≥—Ä—É–ø–ø—ã –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
            '–∞–¥–º–∏–Ω': "üë®‚Äçüíº –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã –∑–∞ –ø–æ–º–æ—â—å—é",
            '—Å–ø–∞–º': "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ –≤ –≥—Ä—É–ø–ø–µ",
            '–æ—Ñ—Ñ—Ç–æ–ø': "üí¨ –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"
        }
    
    def _find_response(self, text: str) -> str:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            str or None: –û—Ç–≤–µ—Ç –∏–ª–∏ None
        """
        text_lower = text.lower().strip()
        
        for keyword, reply in self.responses.items():
            if keyword in text_lower:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å, –µ—Å–ª–∏ –æ—Ç–≤–µ—á–∞–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if config.USE_USER_ACCOUNT:
                    reply += "\n\n‚Äî –û—Ç–≤–µ—á–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
                return reply
        
        return None
    
    def _find_trigger_keyword(self, text: str) -> str:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            str: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        """
        text_lower = text.lower().strip()
        
        for keyword in self.responses.keys():
            if keyword in text_lower:
                return keyword
        
        return None
    
    async def send_response(self, response: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        
        Args:
            response: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if config.USE_USER_ACCOUNT:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É
                await self.reader_client.send_message(self.group_name, response)
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É {self.group_name}: {response[:50]}...")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
                await self.bot_client.send_message(self.group_name, response)
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {self.group_name}: {response[:50]}...")
            
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {self.group_name}: {e}")
            return False
    
    async def start(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥—Ä—É–ø–ø–æ–π"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        if not await super().start():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (–Ω–µ –≤ –∫–∞–Ω–∞–ª–µ)
        if not config.USE_USER_ACCOUNT:
            logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞...")
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –≤ –≥—Ä—É–ø–ø–µ, –∞ –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ
                can_send = await check_bot_permissions(self.bot_client, self.group_name)
                if not can_send:
                    logger.error(f"–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {self.group_name}")
                    return False
                logger.info(f"–ë–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {self.group_name}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ {self.group_name}: {e}")
                return False
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã
        try:
            group_entity = await self.reader_client.get_entity(self.group_name)
            self.chat_db_id = db_manager.get_or_create_chat(
                self.db_session,
                telegram_id=group_entity.id,
                username=getattr(group_entity, 'username', None),
                title=getattr(group_entity, 'title', None),
                chat_type=group_entity.__class__.__name__.lower()
            ).id
            logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: {self.group_name}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä—É–ø–ø—ã: {e}")
            self.db_session = None
        
        return True
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ"""
        if not await self.start():
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        try:
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≥—Ä—É–ø–ø—ã: {self.group_name}")
            group_entity = await self.reader_client.get_entity(self.group_name)
            logger.info(f"–ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: {getattr(group_entity, 'title', self.group_name)}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã '{self.group_name}': {e}")
            logger.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            logger.error("1. –ì—Ä—É–ø–ø–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            logger.error("2. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
            logger.error("3. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –≥—Ä—É–ø–ø—ã")
            logger.error("4. –ì—Ä—É–ø–ø–∞ –ø—Ä–∏–≤–∞—Ç–Ω–∞—è –∏ –Ω—É–∂–µ–Ω —á–∏—Å–ª–æ–≤–æ–π ID")
            logger.error("")
            logger.error("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:")
            logger.error("- @group_username (–¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –≥—Ä—É–ø–ø)")
            logger.error("- -1001234567890 (–¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –≥—Ä—É–ø–ø)")
            logger.error("- group_username (–±–µ–∑ @ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞–µ–≤)")
            logger.error("")
            logger.error("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã...")
            await self.list_available_groups()
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        import time
        self.start_time = time.time()
        
        logger.info(f"–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã: {self.group_name}")
        
        @self.reader_client.on(events.NewMessage(chats=self.group_name))
        async def group_response_handler(event):
            message = event.message
            text = message.text or ""
            
            if not text.strip():
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            logger.info(f"DEBUG: sender_id={message.sender_id}, text='{text}'")
            if message.sender_id is not None:
                try:
                    bot_me = await self.bot_client.get_me()
                    logger.info(f"DEBUG: bot_me.id={bot_me.id}, sender_id={message.sender_id}")
                    if message.sender_id == bot_me.id:
                        logger.info(f"–ò–ì–ù–û–†–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞: {text}")
                        return
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            else:
                logger.info(f"DEBUG: sender_id is None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            if self.start_time and message.date.timestamp() < self.start_time:
                logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞): {text}")
                return
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏ –±–æ—Ç–∞
            for response_text in self.responses.values():
                if text.strip() == response_text.strip():
                    logger.info(f"–ò–ì–ù–û–†–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç –±–æ—Ç–∞: {text}")
                    return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            message_data = {
                'telegram_id': message.id,
                'user_id': message.sender_id,
                'username': getattr(message.sender, 'username', None) if message.sender else None,
                'first_name': getattr(message.sender, 'first_name', None) if message.sender else None,
                'last_name': getattr(message.sender, 'last_name', None) if message.sender else None,
                'is_bot': getattr(message.sender, 'bot', False) if message.sender else False,
                'text': text,
                'message_type': 'text',
                'is_bot_response': False,
                'raw_data': self._safe_serialize_message(message)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message_db_id = self.save_message_to_db(message_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats()
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
            response = self._find_response(text)
            
            if response:
                start_time = asyncio.get_event_loop().time()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                success = await self.send_response(response)
                response_time = int((asyncio.get_event_loop().time() - start_time) * 1000)
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    if message_db_id:
                        self.save_bot_response_to_db(
                            original_message_id=message_db_id,
                            response_text=response,
                            response_type='group_simple',
                            trigger_keyword=self._find_trigger_keyword(text),
                            response_time_ms=response_time,
                            is_successful=True
                        )
                    
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{self.stats['total_messages']}: {message.text}")
                    logger.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response}")
                    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stats['responses_sent']}/{self.stats['total_messages']}")
                    logger.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}–º—Å")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if message_db_id:
                        self.save_bot_response_to_db(
                            original_message_id=message_db_id,
                            response_text=response,
                            response_type='group_simple',
                            trigger_keyword=self._find_trigger_keyword(text),
                            response_time_ms=response_time,
                            is_successful=False,
                            error_message="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
                        )
            else:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{self.stats['total_messages']}: {message.text} (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞)")
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        if config.USE_USER_ACCOUNT:
            logger.info("–û—Ç–≤–µ—á–∞–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            logger.info(f"–û—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {config.BOT_TOKEN[:10]}...")
        
        await self.run_until_disconnected()
    
    async def send_response(self, response: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –≥—Ä—É–ø–ø—É
        
        Args:
            response: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if config.USE_USER_ACCOUNT:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self.reader_client.send_message(self.group_name, response)
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É {self.group_name}: {response[:50]}...")
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
                await self.bot_client.send_message(self.group_name, response)
                logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É {self.group_name}: {response[:50]}...")
            
            self.stats['responses_sent'] += 1
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É {self.group_name}: {e}")
            return False
