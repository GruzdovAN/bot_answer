"""
–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
"""
import asyncio
from telethon import events
from .base_bot import BaseBot
from ..config.settings import config
from ..config.logging_config import get_logger

logger = get_logger("simple_responder")


class SimpleResponder(BaseBot):
    """–ü—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫ —Å –±–∞–∑–æ–≤—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
    
    def __init__(self):
        super().__init__("simple_auto_responder")
        self.responses = self._get_responses()
        self.start_time = None  # –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    
    def _get_responses(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
        return {
            '–ø—Ä–∏–≤–µ—Ç': "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫!",
            '–∫–∞–∫ –¥–µ–ª–∞': "üòä –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê —É —Ç–µ–±—è?",
            '–ø–æ–º–æ—â—å': "üÜò –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
            '—Å–ø–∞—Å–∏–±–æ': "üòä –ü–æ–∂–∞–ª—É–π—Å—Ç–∞!",
            '–ø–æ–∫–∞': "üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        }
    
    def _find_response(self, text: str) -> str:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            str or None: –û—Ç–≤–µ—Ç –∏–ª–∏ None
        """
        text_lower = text.lower().strip()
        
        for keyword, reply in self.responses.items():
            if keyword in text_lower:
                return reply
        
        return None
    
    def _find_trigger_keyword(self, text: str) -> str:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ-—Ç—Ä–∏–≥–≥–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
        
        Args:
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            str: –ù–∞–π–¥–µ–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
        """
        text_lower = text.lower().strip()
        
        for keyword in self.responses.keys():
            if keyword in text_lower:
                return keyword
        
        return None
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not await self.start():
            return
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
        import time
        self.start_time = time.time()
        
        logger.info("–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –±–æ—Ç–æ–º")
        
        @self.reader_client.on(events.NewMessage(chats=config.CHANNEL_USERNAME))
        async def simple_response_handler(event):
            message = event.message
            text = message.text or ""
            
            if not text.strip():
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
            logger.info(f"DEBUG: sender_id={message.sender_id}, text='{text}'")
            if message.sender_id is not None:
                try:
                    bot_me = await self.bot_client.get_me()
                    logger.info(f"DEBUG: bot_me.id={bot_me.id}, sender_id={message.sender_id}")
                    if message.sender_id == bot_me.id:
                        logger.info(f"–ò–ì–ù–û–†–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ –±–æ—Ç–∞: {text}")
                        return
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ: {e}")
                    # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –±–æ—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            else:
                logger.info(f"DEBUG: sender_id is None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            if self.start_time and message.date.timestamp() < self.start_time:
                logger.debug(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞): {text}")
                return
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏ –±–æ—Ç–∞
            for response_text in self.responses.values():
                if text.strip() == response_text.strip():
                    logger.info(f"–ò–ì–ù–û–†–ò–†–£–ï–ú —Å–æ–æ–±—â–µ–Ω–∏–µ-–æ—Ç–≤–µ—Ç –±–æ—Ç–∞: {text}")
                    return
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            message_data = {
                'telegram_id': message.id,
                'user_id': message.sender_id,
                'username': getattr(message.sender, 'username', None) if message.sender else None,
                'first_name': getattr(message.sender, 'first_name', None) if message.sender else None,
                'last_name': getattr(message.sender, 'last_name', None) if message.sender else None,
                'is_bot': getattr(message.sender, 'bot', False) if message.sender else False,
                'text': text,
                'message_type': 'text',
                'is_bot_response': False,
                'raw_data': self._safe_serialize_message(message)
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            message_db_id = self.save_message_to_db(message_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.update_stats()
            
            # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç
            response = self._find_response(text)
            
            if response:
                start_time = asyncio.get_event_loop().time()
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                success = await self.send_response(response)
                response_time = int((asyncio.get_event_loop().time() - start_time) * 1000)
                
                if success:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    if message_db_id:
                        self.save_bot_response_to_db(
                            original_message_id=message_db_id,
                            response_text=response,
                            response_type='simple',
                            trigger_keyword=self._find_trigger_keyword(text),
                            response_time_ms=response_time,
                            is_successful=True
                        )
                    
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{self.stats['total_messages']}: {message.text}")
                    logger.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {response}")
                    logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {self.stats['responses_sent']}/{self.stats['total_messages']}")
                    logger.info(f"–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {response_time}–º—Å")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç
                    if message_db_id:
                        self.save_bot_response_to_db(
                            original_message_id=message_db_id,
                            response_text=response,
                            response_type='simple',
                            trigger_keyword=self._find_trigger_keyword(text),
                            response_time_ms=response_time,
                            is_successful=False,
                            error_message="–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"
                        )
            else:
                logger.debug(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{self.stats['total_messages']}: {message.text} (–±–µ–∑ –æ—Ç–≤–µ—Ç–∞)")
        
        logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        if config.USE_USER_ACCOUNT:
            logger.info("–û—Ç–≤–µ—á–∞–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        else:
            logger.info(f"–û—Ç–≤–µ—á–∞–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞: {config.BOT_TOKEN[:10]}...")
        
        await self.run_until_disconnected()
