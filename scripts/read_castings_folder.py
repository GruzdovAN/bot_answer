#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings –≤ Telegram
"""

import asyncio
import os
import sys
import logging
import json
from datetime import datetime, timedelta
from typing import List, Dict, Any
from dotenv import load_dotenv
from telethon import TelegramClient
from telethon.tl.types import Channel, Chat, User

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
try:
    from src.database.clickhouse_client import ClickHouseClient
    from config.castings_channels import CASTINGS_SETTINGS, CASTING_PARSER_CONFIG
except ImportError as e:
    print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {e}")
    ClickHouseClient = None
    CASTINGS_SETTINGS = {}
    CASTING_PARSER_CONFIG = {}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class CastingsFolderReader:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Telegram"""
        self.api_id = os.getenv('API_ID_TG')
        self.api_hash = os.getenv('API_HASH_TG')
        self.phone_number = os.getenv('PHONE_NUMBER')
        
        if not all([self.api_id, self.api_hash, self.phone_number]):
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API_ID_TG, API_HASH_TG –∏ PHONE_NUMBER –≤ .env —Ñ–∞–π–ª–µ")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Å–µ—Å—Å–∏—é
        self.client = self._get_best_session()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ClickHouse –∫–ª–∏–µ–Ω—Ç–∞
        self.clickhouse = None
        if ClickHouseClient:
            try:
                self.clickhouse = ClickHouseClient()
                logger.info("ClickHouse –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å ClickHouse: {e}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.settings = CASTINGS_SETTINGS or {}
        self.parser_config = CASTING_PARSER_CONFIG or {}
    
    def _get_best_session(self):
        """–í—ã–±–æ—Ä –ª—É—á—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π —Å–µ—Å—Å–∏–∏"""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ—Å—Å–∏–π (–æ—Ç –ª—É—á—à–∏—Ö –∫ —Ö—É–¥—à–∏–º) - —Ç–æ–ª—å–∫–æ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ
        session_priorities = [
            'sessions/reader',                 # –ß–∏—Ç–∞—Ç–µ–ª—å (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            'sessions/group_auto_responder_reader',  # –ì—Ä—É–ø–ø–æ–≤–æ–π –æ—Ç–≤–µ—Ç—á–∏–∫ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            'sessions/simple_auto_responder_reader',  # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç—á–∏–∫ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
            'sessions/group_auto_responder_bot',      # –ë–æ—Ç —Å–µ—Å—Å–∏–∏
            'sessions/bot',                    # –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
            'sessions/simple_auto_responder_bot'      # –ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç
        ]
        
        for session_path in session_priorities:
            if os.path.exists(f"{session_path}.session"):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Å—Å–∏—è –≤–∞–ª–∏–¥–Ω–∞
                    client = TelegramClient(
                        session_path,
                        int(self.api_id),
                        self.api_hash
                    )
                    logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è —Å–µ—Å—Å–∏—è: {session_path}")
                    return client
                except Exception as e:
                    logger.warning(f"–°–µ—Å—Å–∏—è {session_path} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
                    continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–µ—Å—Å–∏—é, –∏—Å–ø–æ–ª—å–∑—É–µ–º reader –∫–∞–∫ fallback
        logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é reader –∫–∞–∫ fallback")
        return TelegramClient(
            'sessions/reader',
            int(self.api_id),
            self.api_hash
        )
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π (–±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
            await self.client.start()
            logger.info("–ö–ª–∏–µ–Ω—Ç Telegram –∑–∞–ø—É—â–µ–Ω —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
            me = await self.client.get_me()
            logger.info(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: {me.first_name} {me.last_name or ''} (@{me.username or '–ù–µ—Ç username'})")
            
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π: {e}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Å—Å–∏–∏: {e}")
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.client.disconnect()
        logger.info("–ö–ª–∏–µ–Ω—Ç Telegram –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
    async def get_castings_folder_channels(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö '–∫–∞—Å—Ç–∏–Ω–≥' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)"""
        channels_info = []
        
        try:
            logger.info("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å '–∫–∞—Å—Ç–∏–Ω–≥' –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –∏—â–µ–º –∫–∞–Ω–∞–ª—ã —Å "–∫–∞—Å—Ç–∏–Ω–≥" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
            async for dialog in self.client.iter_dialogs():
                if dialog.entity and hasattr(dialog.entity, 'title'):
                    title = dialog.entity.title.lower()
                    if '–∫–∞—Å—Ç–∏–Ω–≥' in title or 'casting' in title:
                        channel_info = await self._get_channel_info(dialog.entity)
                        if channel_info:
                            channels_info.append(channel_info)
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã–π –∫–∞–Ω–∞–ª: {dialog.entity.title}")
            
            logger.info(f"üé≠ –ù–∞–π–¥–µ–Ω–æ {len(channels_info)} –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            return channels_info
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    async def _search_castings_channels(self) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        channels_info = []
        
        try:
            # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤
            casting_keywords = [
                'casting', '–∫–∞—Å—Ç–∏–Ω–≥', 'audition', '–ø—Ä–æ—Å–º–æ—Ç—Ä', 'talent', '–º–æ–¥–µ–ª—å',
                '–∞–∫—Ç–µ—Ä', '–∞–∫—Ç—Ä–∏—Å–∞', '–≤–µ–¥—É—â–∏–π', '—Ç–∞–Ω—Ü–æ—Ä', '–ø–µ–≤–µ—Ü', '—Ñ–æ—Ç–æ–º–æ–¥–µ–ª—å',
                '—Ä–µ–∫–ª–∞–º–∞', '—Å—ä–µ–º–∫–∞', '—Ñ–∏–ª—å–º', '—Å–µ—Ä–∏–∞–ª', '—à–æ—É', '–∫–æ–Ω—Ü–µ—Ä—Ç'
            ]
            
            logger.info(f"–ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {casting_keywords[:5]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –∏—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–∞–ª—ã
            dialog_count = 0
            async for dialog in self.client.iter_dialogs():
                dialog_count += 1
                entity = dialog.entity
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞
                if isinstance(entity, (Channel, Chat)):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    title = getattr(entity, 'title', '')
                    username = getattr(entity, 'username', '')
                    description = getattr(entity, 'about', '')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
                    text_to_check = f"{title} {username} {description}".lower()
                    
                    if any(keyword.lower() in text_to_check for keyword in casting_keywords):
                        logger.info(f"üéØ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–∞–ª: {title} (@{username})")
                        logger.info(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {getattr(entity, 'participants_count', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                        channel_info = await self._get_channel_info(entity)
                        if channel_info:
                            channels_info.append(channel_info)
                            logger.info(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
                        else:
                            logger.warning(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ")
                            
                # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100 –¥–∏–∞–ª–æ–≥–æ–≤
                if dialog_count % 100 == 0:
                    logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {dialog_count} –¥–∏–∞–ª–æ–≥–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(channels_info)} –∫–∞–Ω–∞–ª–æ–≤")
                            
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if dialog_count > 1000:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º—É–º 1000 –¥–∏–∞–ª–æ–≥–æ–≤
                    logger.info("üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–∏—Å–∫–∞ (1000 –¥–∏–∞–ª–æ–≥–æ–≤)")
                    break
                    
            logger.info(f"üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {dialog_count} –¥–∏–∞–ª–æ–≥–æ–≤, –Ω–∞–π–¥–µ–Ω–æ {len(channels_info)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤")
                            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            
        return channels_info
    
    async def _get_channel_info(self, entity) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ"""
        try:
            info = {
                'id': entity.id,
                'title': getattr(entity, 'title', ''),
                'username': getattr(entity, 'username', ''),
                'type': 'channel' if isinstance(entity, Channel) else 'chat',
                'participants_count': getattr(entity, 'participants_count', 0),
                'description': getattr(entity, 'about', ''),
                'created_date': getattr(entity, 'date', None),
                'is_verified': getattr(entity, 'verified', False),
                'is_scam': getattr(entity, 'scam', False),
                'is_fake': getattr(entity, 'fake', False),
            }
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            try:
                messages = []
                async for message in self.client.iter_messages(entity, limit=5):
                    messages.append({
                        'id': message.id,
                        'date': message.date,
                        'text': message.text[:100] if message.text else '',
                        'views': getattr(message, 'views', 0),
                        'forwards': getattr(message, 'forwards', 0)
                    })
                info['recent_messages'] = messages
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ {info['title']}: {e}")
                info['recent_messages'] = []
                
            return info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {e}")
            return None
    
    async def read_channel_messages(self, channel_info: Dict[str, Any], days_back: int = 7, limit: int = 100) -> List[Dict[str, Any]]:
        """–ß—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            logger.info(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–∞: {channel_info['title']} (@{channel_info['username']})")
            logger.info(f"   ID: {channel_info['id']}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel_info['participants_count']}")
            
            entity = await self.client.get_entity(channel_info['id'])
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É: {entity.title}")
            
            messages = []
            offset_date = datetime.now() - timedelta(days=days_back)
            logger.info(f"üìÖ –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å {offset_date.strftime('%Y-%m-%d %H:%M')} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {days_back} –¥–Ω–µ–π)")
            logger.info(f"üìä –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π: {limit}")
            
            message_count = 0
            async for message in self.client.iter_messages(
                entity,
                limit=limit,
                offset_date=offset_date
            ):
                message_count += 1
                logger.info(f"   üìù –°–æ–æ–±—â–µ–Ω–∏–µ {message_count}: ID {message.id}, –¥–∞—Ç–∞: {message.date.strftime('%Y-%m-%d %H:%M')}")
                
                message_data = {
                    'message_id': message.id,
                    'channel_id': channel_info['id'],
                    'channel_title': channel_info['title'],
                    'channel_username': channel_info['username'],
                    'date': message.date,
                    'text': message.text or '',
                    'views': getattr(message, 'views', 0),
                    'forwards': getattr(message, 'forwards', 0),
                    'replies': getattr(message.replies, 'replies', 0) if hasattr(message, 'replies') and message.replies else 0,
                    'media_type': type(message.media).__name__ if message.media else None,
                    'has_photo': bool(message.photo),
                    'has_video': bool(message.video),
                    'has_document': bool(message.document),
                }
                messages.append(message_data)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è
                if message.text:
                    preview = message.text[:100].replace('\n', ' ')
                    logger.info(f"      –¢–µ–∫—Å—Ç: {preview}...")
                else:
                    logger.info(f"      –ú–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_data['media_type']}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                await asyncio.sleep(0.1)
            
            logger.info(f"‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_info['title']}")
            return messages
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {channel_info['title']}: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return []
    
    async def read_all_castings_channels(self, days_back: int = 7, limit_per_channel: int = 100) -> Dict[str, Any]:
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings"""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings...")
        logger.info(f"üìÖ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {days_back} –¥–Ω–µ–π –Ω–∞–∑–∞–¥, {limit_per_channel} —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        logger.info("üîç –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤...")
        channels = await self.get_castings_folder_channels()
        
        if not channels:
            logger.warning("‚ö†Ô∏è –ö–∞–Ω–∞–ª—ã –≤ –ø–∞–ø–∫–µ @castings –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return {'channels': [], 'total_messages': 0, 'error': '–ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
        
        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ø–∞–ø–∫–µ @castings")
        
        all_messages = []
        channels_data = []
        
        for i, channel in enumerate(channels, 1):
            logger.info(f"\nüì∫ –ö–∞–Ω–∞–ª {i}/{len(channels)}: {channel['title']} (@{channel['username']})")
            logger.info(f"   ID: {channel['id']}, —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel['participants_count']}")
            
            # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞
            messages = await self.read_channel_messages(channel, days_back, limit_per_channel)
            
            channel_data = {
                'channel_info': channel,
                'messages_count': len(messages),
                'messages': messages
            }
            
            channels_data.append(channel_data)
            all_messages.extend(messages)
            
            logger.info(f"üìä –ò—Ç–æ–≥–æ –ø–æ –∫–∞–Ω–∞–ª—É: {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
            if i < len(channels):
                logger.info("‚è≥ –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫–∞–Ω–∞–ª–æ–º...")
                await asyncio.sleep(2)
        
        result = {
            'channels': channels_data,
            'total_channels': len(channels),
            'total_messages': len(all_messages),
            'read_date': datetime.now().isoformat(),
            'days_back': days_back,
            'limit_per_channel': limit_per_channel
        }
        
        logger.info(f"\nüéâ –ß—Ç–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"   - –ö–∞–Ω–∞–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(channels)}")
        logger.info(f"   - –°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {len(all_messages)}")
        logger.info(f"   - –°—Ä–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–Ω–∞–ª: {len(all_messages) / len(channels) if channels else 0:.1f}")
        
        return result
    
    def parse_casting_message(self, message_text: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        import re
        
        parsed_data = {
            'original_text': message_text,
            'casting_type': None,
            'age_range': None,
            'location': None,
            'contact_info': None,
            'deadline': None,
            'payment': None,
            'project_name': None,
            'requirements': []
        }
        
        if not self.parser_config.get('patterns'):
            return parsed_data
        
        patterns = self.parser_config['patterns']
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
        if 'age_range' in patterns:
            age_match = re.search(patterns['age_range'], message_text, re.IGNORECASE)
            if age_match:
                parsed_data['age_range'] = age_match.group(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        if 'location' in patterns:
            location_match = re.search(patterns['location'], message_text, re.IGNORECASE)
            if location_match:
                parsed_data['location'] = location_match.group(1)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if 'contact' in patterns:
            contact_match = re.search(patterns['contact'], message_text, re.IGNORECASE)
            if contact_match:
                parsed_data['contact_info'] = contact_match.group(2)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–¥–ª–∞–π–Ω
        if 'deadline' in patterns:
            deadline_match = re.search(patterns['deadline'], message_text, re.IGNORECASE)
            if deadline_match:
                parsed_data['deadline'] = deadline_match.group(2)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–ª–∞—Ç–µ
        if 'payment' in patterns:
            payment_match = re.search(patterns['payment'], message_text, re.IGNORECASE)
            if payment_match:
                parsed_data['payment'] = payment_match.group(2)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Å—Ç–∏–Ω–≥–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        casting_types = ['–º–æ–¥–µ–ª—å', '–∞–∫—Ç–µ—Ä', '–∞–∫—Ç—Ä–∏—Å–∞', '–≤–µ–¥—É—â–∏–π', '—Ç–∞–Ω—Ü–æ—Ä', '–ø–µ–≤–µ—Ü', '—Ñ–æ—Ç–æ–º–æ–¥–µ–ª—å']
        for casting_type in casting_types:
            if casting_type.lower() in message_text.lower():
                parsed_data['casting_type'] = casting_type
                break
        
        return parsed_data
    
    async def save_to_database(self, messages: List[Dict[str, Any]], channels_info: List[Dict[str, Any]] = None) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ClickHouse"""
        if not self.clickhouse:
            logger.warning("‚ö†Ô∏è ClickHouse –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
            return False
            
        if not messages:
            logger.info("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
            return True
        
        try:
            logger.info(f"üíæ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ClickHouse...")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            db_messages = []
            for i, msg in enumerate(messages, 1):
                logger.info(f"   üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i}/{len(messages)}: ID {msg['message_id']}")
                
                # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                parsed = self.parse_casting_message(msg['text'])
                
                # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if any(parsed[key] for key in ['casting_type', 'age_range', 'location', 'contact_info', 'deadline', 'payment']):
                    logger.info(f"      üéØ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {', '.join([f'{k}: {v}' for k, v in parsed.items() if v])}")
                
                db_message = {
                    'message_id': msg['message_id'],
                    'channel_id': msg['channel_id'],
                    'channel_title': msg['channel_title'],
                    'channel_username': msg['channel_username'] or '',
                    'date': msg['date'],
                    'text': msg['text'],
                    'views': msg['views'],
                    'forwards': msg['forwards'],
                    'replies': msg['replies'],
                    'media_type': msg['media_type'] or '',
                    'has_photo': msg['has_photo'],
                    'has_video': msg['has_video'],
                    'has_document': msg['has_document'],
                    # –ü–∞—Ä—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                    'casting_type': parsed['casting_type'] or '',
                    'age_range': parsed['age_range'] or '',
                    'location': parsed['location'] or '',
                    'contact_info': parsed['contact_info'] or '',
                    'deadline': parsed['deadline'] or '',
                    'payment': parsed['payment'] or '',
                    'project_name': parsed['project_name'] or '',
                    'parsed_at': datetime.now()
                }
                db_messages.append(db_message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ClickHouse
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º {len(db_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ClickHouse...")
            self.clickhouse.insert_castings_messages(db_messages)
            logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(db_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ ClickHouse")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
            if channels_info:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ —Ç–∞–±–ª–∏—Ü—É all_channels
                logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {len(channels_info)} –∫–∞–Ω–∞–ª–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É all_channels...")
                self.clickhouse.insert_all_channels(channels_info)
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(channels_info)} –∫–∞–Ω–∞–ª–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É all_channels")
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª—ã —Å "–∫–∞—Å—Ç–∏–Ω–≥" –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –¥–ª—è channels_info
                castings_channels = []
                for channel in channels_info:
                    title = (channel.get('title') or '').lower()
                    if '–∫–∞—Å—Ç–∏–Ω–≥' in title or 'casting' in title:
                        castings_channels.append(channel)
                
                if castings_channels:
                    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {len(castings_channels)} –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É channels_info...")
                    self.clickhouse.insert_channels_info(castings_channels)
                    logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(castings_channels)} –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö –≤ —Ç–∞–±–ª–∏—Ü—É channels_info")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ channels_info")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
            return False
    
    def update_channels_config(self, channels: List[Dict[str, Any]]) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏"""
        try:
            config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'castings_channels.py')
            
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ñ–∏–≥
            if os.path.exists(config_path):
                with open(config_path, 'r', encoding='utf-8') as f:
                    content = f.read()
            else:
                content = ""
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
            channels_config = {}
            for channel in channels:
                channel_id = str(channel['id'])
                channels_config[channel_id] = {
                    'username': f"@{channel['username']}" if channel['username'] else None,
                    'title': channel['title'],
                    'enabled': True,
                    'parser_type': 'casting_parser',
                    'days_back': self.settings.get('default_days_back', 7),
                    'batch_size': self.settings.get('default_batch_size', 50),
                    'auto_update': True,
                    'participants_count': channel['participants_count'],
                    'description': channel['description'],
                    'is_verified': channel['is_verified'],
                    'discovered_at': datetime.now().isoformat()
                }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            new_content = f"""# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().isoformat()}

CASTINGS_CHANNELS = {self._dict_to_python(channels_config, indent=4)}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ @castings
CASTINGS_SETTINGS = {self._dict_to_python(self.settings, indent=4)}

# –ü–∞—Ä—Å–µ—Ä –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
CASTING_PARSER_CONFIG = {self._dict_to_python(self.parser_config, indent=4)}
"""
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
            with open(config_path, 'w', encoding='utf-8') as f:
                f.write(new_content)
            
            logger.info(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _dict_to_python(self, data, indent=0):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤ Python –∫–æ–¥"""
        if isinstance(data, dict):
            items = []
            for key, value in data.items():
                key_str = f'"{key}"' if isinstance(key, str) else str(key)
                value_str = self._dict_to_python(value, indent + 4)
                items.append(f"{' ' * indent}{key_str}: {value_str}")
            return "{\n" + ",\n".join(items) + "\n" + " " * (indent - 4) + "}"
        elif isinstance(data, list):
            items = []
            for item in data:
                items.append(self._dict_to_python(item, indent + 4))
            return "[\n" + ",\n".join(f"{' ' * indent}{item}" for item in items) + "\n" + " " * (indent - 4) + "]"
        elif isinstance(data, str):
            return f'"{data}"'
        elif isinstance(data, bool):
            return "True" if data else "False"
        elif data is None:
            return "None"
        else:
            return str(data)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    reader = CastingsFolderReader()
    
    try:
        await reader.start()
        
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏–∑ –ø–∞–ø–∫–∏ @castings
        result = await reader.read_all_castings_channels(days_back=7, limit_per_channel=50)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\n" + "="*50)
        print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ß–¢–ï–ù–ò–Ø –ö–ê–ù–ê–õ–û–í –ò–ó –ü–ê–ü–ö–ò @CASTINGS")
        print("="*50)
        
        print(f"–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {result['total_channels']}")
        print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {result['total_messages']}")
        print(f"–î–∞—Ç–∞ —á—Ç–µ–Ω–∏—è: {result['read_date']}")
        print(f"–ü–µ—Ä–∏–æ–¥: {result['days_back']} –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
        print(f"–õ–∏–º–∏—Ç –Ω–∞ –∫–∞–Ω–∞–ª: {result['limit_per_channel']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        print("\n" + "-"*50)
        print("–î–ï–¢–ê–õ–ò –ü–û –ö–ê–ù–ê–õ–ê–ú:")
        print("-"*50)
        
        all_messages = []
        for i, channel_data in enumerate(result['channels'], 1):
            channel = channel_data['channel_info']
            print(f"\n{i}. {channel['title']}")
            print(f"   Username: @{channel['username']}")
            print(f"   ID: {channel['id']}")
            print(f"   –¢–∏–ø: {channel['type']}")
            print(f"   –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel['participants_count']}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {channel_data['messages_count']}")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {channel['description'][:100]}...")
            
            if channel_data['messages']:
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:")
                for msg in channel_data['messages'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è
                    print(f"     - {msg['date'].strftime('%Y-%m-%d %H:%M')}: {msg['text'][:50]}...")
                
                # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                all_messages.extend(channel_data['messages'])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        if all_messages:
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(all_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–∞—Ö
            channels_info = [channel_data['channel_info'] for channel_data in result['channels']]
            saved = await reader.save_to_database(all_messages, channels_info)
            if saved:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ClickHouse")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–∞–Ω–∞–ª–æ–≤
        if result['channels']:
            print(f"\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤...")
            channels_info = [ch['channel_info'] for ch in result['channels']]
            config_updated = reader.update_channels_config(channels_info)
            if config_updated:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        output_file = f"castings_channels_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(result, f, ensure_ascii=False, indent=2, default=str)
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {output_file}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Å–∏–Ω–≥–∞
        if all_messages:
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê:")
            print("-"*30)
            
            casting_types = {}
            locations = {}
            payments = {}
            
            for msg in all_messages:
                parsed = reader.parse_casting_message(msg['text'])
                
                if parsed['casting_type']:
                    casting_types[parsed['casting_type']] = casting_types.get(parsed['casting_type'], 0) + 1
                
                if parsed['location']:
                    locations[parsed['location']] = locations.get(parsed['location'], 0) + 1
                
                if parsed['payment']:
                    payments[parsed['payment']] = payments.get(parsed['payment'], 0) + 1
            
            if casting_types:
                print(f"–¢–∏–ø—ã –∫–∞—Å—Ç–∏–Ω–≥–æ–≤: {dict(list(casting_types.items())[:5])}")
            if locations:
                print(f"–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è: {dict(list(locations.items())[:5])}")
            if payments:
                print(f"–û–ø–ª–∞—Ç–∞: {dict(list(payments.items())[:5])}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
    finally:
        await reader.stop()

if __name__ == '__main__':
    asyncio.run(main())
