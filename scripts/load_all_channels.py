#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ ClickHouse –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
"""

import os
import sys
import json
import requests
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class ClickHouseManager:
    def __init__(self):
        self.host = os.getenv('CLICKHOUSE_HOST', 'localhost')
        self.port = os.getenv('CLICKHOUSE_PORT', '8123')
        self.user = os.getenv('CLICKHOUSE_USER', 'clickhouse_admin')
        self.password = os.getenv('CLICKHOUSE_PASSWORD')
        self.database = os.getenv('CLICKHOUSE_DB', 'telegram_analytics')
        
        self.base_url = f"http://{self.host}:{self.port}"
        self.auth = (self.user, self.password) if self.user and self.password else None
    
    def execute_query(self, query, database=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        db = database or self.database
        response = requests.post(
            self.base_url,
            data=query,
            auth=self.auth,
            params={'database': db},
            timeout=10
        )
        
        if response.status_code != 200:
            raise Exception(f"ClickHouse error: {response.text}")
        
        return response.text.strip()
    
    def insert_channels_info(self, channels):
        """–í—Å—Ç–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö –≤ ClickHouse"""
        if not channels:
            return
        
        values = []
        for channel in channels:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–ª—è
            channel_id = channel.get('id', 0)
            title = (channel.get('title') or '').replace("'", "''")
            username = (channel.get('username') or '').replace("'", "''")
            channel_type = (channel.get('type') or '').replace("'", "''")
            participants_count = channel.get('participants_count', 0) or 0
            description = (channel.get('description') or '').replace("'", "''")
            is_verified = int(channel.get('is_verified', False))
            is_scam = int(channel.get('is_scam', False))
            is_fake = int(channel.get('is_fake', False))
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—ã
            created_date = channel.get('created_date')
            if created_date and hasattr(created_date, 'strftime'):
                created_date_str = created_date.strftime('%Y-%m-%d %H:%M:%S')
            else:
                created_date_str = '1970-01-01 00:00:00'
            
            discovered_at_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            
            values.append(f"({channel_id}, '{title}', '{username}', '{channel_type}', {participants_count}, '{description}', {is_verified}, {is_scam}, {is_fake}, '{created_date_str}', '{discovered_at_str}')")
        
        query = f"INSERT INTO channels_info (channel_id, title, username, type, participants_count, description, is_verified, is_scam, is_fake, created_date, discovered_at) VALUES {','.join(values)}"
        
        response = requests.post(
            self.base_url,
            data=query,
            auth=self.auth,
            params={'database': self.database},
            timeout=10
        )
        
        if response.status_code != 200:
            raise Exception(f"ClickHouse error: {response.text}")

def load_channels_from_json(json_file_path):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if not os.path.exists(json_file_path):
        print(f"‚ùå –§–∞–π–ª {json_file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with open(json_file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    return [channel_data['channel_info'] for channel_data in data['channels']]

def filter_castings_channels(channels):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–∞—Å—Ç–∏–Ω–≥–∞–º–∏"""
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤
    castings_keywords = [
        '–∫–∞—Å—Ç–∏–Ω–≥', 'casting', '–∞–∫—Ç–µ—Ä', '–∞–∫—Ç—Ä–∏—Å–∞', '–º–æ–¥–µ–ª—å', 'model',
        '—Å—ä–µ–º–∫–∞', '—Ñ–∏–ª—å–º', '—Ä–µ–∫–ª–∞–º–∞', '—Ä–æ–ª–∏–∫', '–∫–ª–∏–ø', '—Å–µ—Ä–∏–∞–ª',
        '—Ç–µ–∞—Ç—Ä', '—Å–ø–µ–∫—Ç–∞–∫–ª—å', '—à–æ—É', '–≤–µ–¥—É—â–∏–π', '–≤–µ–¥—É—â–∞—è'
    ]
    
    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è - –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï —è–≤–ª—è—é—Ç—Å—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã–º–∏
    exclude_keywords = [
        '–æ–±—É—á–∞–ª–∞', '–æ–±—É—á–µ–Ω–∏–µ', '–∫—É—Ä—Å', '—à–∫–æ–ª–∞', '–∞–∫–∞–¥–µ–º–∏—è', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
        '–∫–æ–Ω—Ü–µ—Ä—Ç –∞—É—Ç–∏—Å—Ç–æ–≤', '–∞—É—Ç–∏—Å—Ç', '–±–æ–ª–µ–∑–Ω—å', '–ª–µ—á–µ–Ω–∏–µ', '–º–µ–¥–∏—Ü–∏–Ω–∞',
        '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '—Ç—Ä–µ–Ω–∏–Ω–≥', '—Å–µ–º–∏–Ω–∞—Ä'
    ]
    
    castings_channels = []
    
    for channel in channels:
        title = (channel.get('title') or '').lower()
        username = (channel.get('username') or '').lower()
        description = (channel.get('description') or '').lower()
        
        text_to_check = f"{title} {username} {description}"
        
        # –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è - –µ—Å–ª–∏ –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if any(exclude_keyword in text_to_check for exclude_keyword in exclude_keywords):
            print(f"üö´ –ò—Å–∫–ª—é—á–µ–Ω: {channel.get('title')} (–∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞)")
            continue
        
        # –ü–û–¢–û–ú –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤
        if any(keyword in text_to_check for keyword in castings_keywords):
            print(f"‚úÖ –í–∫–ª—é—á–µ–Ω: {channel.get('title')} (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤)")
            castings_channels.append(channel)
        else:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω: {channel.get('title')} (–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤)")
    
    return castings_channels

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì∫ –ó–ê–ì–†–£–ó–ö–ê –ò –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ö–ê–ù–ê–õ–û–í")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º ClickHouse –º–µ–Ω–µ–¥–∂–µ—Ä
    ch_manager = ClickHouseManager()
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π JSON —Ñ–∞–π–ª
    json_files = [f for f in os.listdir('.') if f.startswith('castings_channels_') and f.endswith('.json')]
    
    if not json_files:
        print("‚ùå JSON —Ñ–∞–π–ª—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    json_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
    latest_file = json_files[0]
    
    print(f"üìÅ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª: {latest_file}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–Ω–∞–ª—ã
    all_channels = load_channels_from_json(latest_file)
    print(f"üìä –í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: {len(all_channels)}")
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã —Å –∫–∞—Å—Ç–∏–Ω–≥–∞–º–∏
    castings_channels = filter_castings_channels(all_channels)
    print(f"üé≠ –ö–∞–Ω–∞–ª–æ–≤ —Å –∫–∞—Å—Ç–∏–Ω–≥–∞–º–∏: {len(castings_channels)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    print("\nüéØ –ö–ê–ù–ê–õ–´ –° –ö–ê–°–¢–ò–ù–ì–ê–ú–ò:")
    print("=" * 40)
    for i, channel in enumerate(castings_channels, 1):
        print(f"{i:2d}. {channel['title']}")
        print(f"    Username: @{channel['username']}")
        print(f"    –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {channel['participants_count']:,}")
        print(f"    –¢–∏–ø: {channel['type']}")
        print()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ ClickHouse
    print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã –≤ ClickHouse...")
    try:
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
        ch_manager.execute_query('TRUNCATE TABLE channels_info')
        ch_manager.insert_channels_info(all_channels)
        print("‚úÖ –í—Å–µ –∫–∞–Ω–∞–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ClickHouse")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        count = ch_manager.execute_query('SELECT COUNT(*) FROM channels_info')
        print(f"üìã –ó–∞–ø–∏—Å–µ–π –≤ channels_info: {count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    print("\nüé≠ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤...")
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É castings_channels
        create_table_sql = """
        CREATE TABLE IF NOT EXISTS castings_channels (
            channel_id UInt64,
            title String,
            username String,
            type String,
            participants_count UInt32,
            description String,
            is_verified UInt8,
            is_scam UInt8,
            is_fake UInt8,
            created_date DateTime,
            discovered_at DateTime DEFAULT now()
        ) ENGINE = MergeTree()
        ORDER BY channel_id
        """
        
        ch_manager.execute_query(create_table_sql)
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ castings_channels —Å–æ–∑–¥–∞–Ω–∞")
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        ch_manager.execute_query('TRUNCATE TABLE castings_channels')
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã
        if castings_channels:
            values = []
            for channel in castings_channels:
                channel_id = channel.get('id', 0)
                title = (channel.get('title') or '').replace("'", "''")
                username = (channel.get('username') or '').replace("'", "''")
                channel_type = (channel.get('type') or '').replace("'", "''")
                participants_count = channel.get('participants_count', 0) or 0
                description = (channel.get('description') or '').replace("'", "''")
                is_verified = int(channel.get('is_verified', False))
                is_scam = int(channel.get('is_scam', False))
                is_fake = int(channel.get('is_fake', False))
                
                created_date = channel.get('created_date')
                if created_date and hasattr(created_date, 'strftime'):
                    created_date_str = created_date.strftime('%Y-%m-%d %H:%M:%S')
                else:
                    created_date_str = '1970-01-01 00:00:00'
                
                discovered_at_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                
                values.append(f"({channel_id}, '{title}', '{username}', '{channel_type}', {participants_count}, '{description}', {is_verified}, {is_scam}, {is_fake}, '{created_date_str}', '{discovered_at_str}')")
            
            query = f"INSERT INTO castings_channels (channel_id, title, username, type, participants_count, description, is_verified, is_scam, is_fake, created_date, discovered_at) VALUES {','.join(values)}"
            ch_manager.execute_query(query)
            print(f"‚úÖ {len(castings_channels)} –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        count = ch_manager.execute_query('SELECT COUNT(*) FROM castings_channels')
        print(f"üìã –ó–∞–ø–∏—Å–µ–π –≤ castings_channels: {count}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –∫–∞—Å—Ç–∏–Ω–≥–æ–≤: {e}")

if __name__ == '__main__':
    main()
