#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ClickHouse
"""

import os
import sys
import requests
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
from config.database_config import CLICKHOUSE_CONFIG, CREATE_TABLES_SQL

class DatabaseManager:
    def __init__(self):
        self.host = os.getenv('CLICKHOUSE_HOST', CLICKHOUSE_CONFIG['host'])
        self.port = os.getenv('CLICKHOUSE_PORT', CLICKHOUSE_CONFIG['port'])
        self.user = os.getenv('CLICKHOUSE_USER', CLICKHOUSE_CONFIG['user'])
        self.password = os.getenv('CLICKHOUSE_PASSWORD', CLICKHOUSE_CONFIG['password'])
        self.database = os.getenv('CLICKHOUSE_DB', CLICKHOUSE_CONFIG['database'])
        
        self.base_url = f"http://{self.host}:{self.port}"
        self.auth = (self.user, self.password) if self.user and self.password else None
    
    def execute_query(self, query, database=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        db = database or self.database
        response = requests.post(
            self.base_url,
            data=query,
            auth=self.auth,
            params={'database': db}
        )
        
        if response.status_code != 200:
            raise Exception(f"ClickHouse error: {response.text}")
        
        return response.text.strip()
    
    def show_databases(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        result = self.execute_query('SHOW DATABASES')
        databases = [db for db in result.split('\n') if db and db not in ['default', 'system', 'information_schema']]
        return databases
    
    def show_tables(self, database=None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ"""
        db = database or self.database
        result = self.execute_query('SHOW TABLES', db)
        tables = [table for table in result.split('\n') if table]
        return tables
    
    def drop_database(self, database_name):
        """–£–¥–∞–ª–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.execute_query(f'DROP DATABASE IF EXISTS {database_name}')
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{database_name}' —É–¥–∞–ª–µ–Ω–∞")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–∞–∑—ã '{database_name}': {e}")
            return False
    
    def create_table(self, table_name, database=None):
        """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"""
        db = database or self.database
        
        if table_name not in CREATE_TABLES_SQL:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {table_name}")
            return False
        
        try:
            sql = CREATE_TABLES_SQL[table_name].format(database=db)
            self.execute_query(sql, db)
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ '{table_name}' —Å–æ–∑–¥–∞–Ω–∞ –≤ –±–∞–∑–µ '{db}'")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã '{table_name}': {e}")
            return False
    
    def get_table_info(self, table_name, database=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–µ"""
        db = database or self.database
        try:
            result = self.execute_query(f'DESCRIBE {table_name}', db)
            return result
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–±–ª–∏—Ü–µ '{table_name}': {e}")
            return None
    
    def get_table_count(self, table_name, database=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        db = database or self.database
        try:
            result = self.execute_query(f'SELECT COUNT(*) FROM {table_name}', db)
            return int(result)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ '{table_name}': {e}")
            return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = DatabaseManager()
    
    print("üóÑÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–û–ô –î–ê–ù–ù–´–• CLICKHOUSE")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    databases = manager.show_databases()
    for db in databases:
        print(f"  - {db}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
    print(f"\nüìã –¢–ê–ë–õ–ò–¶–´ –í –ë–ê–ó–ï '{manager.database}':")
    tables = manager.show_tables()
    for table in tables:
        count = manager.get_table_count(table)
        print(f"  - {table} ({count} –∑–∞–ø–∏—Å–µ–π)")
    
    # –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É telegram_bot_analytics
    if 'telegram_bot_analytics' in databases:
        print(f"\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—É—é –±–∞–∑—É 'telegram_bot_analytics'...")
        manager.drop_database('telegram_bot_analytics')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤
    print(f"\nüîß –°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶ –î–õ–Ø –ö–ê–°–¢–ò–ù–ì–û–í:")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞—Å—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if 'castings_messages' not in tables:
        manager.create_table('castings_messages')
    else:
        print("  - –¢–∞–±–ª–∏—Ü–∞ 'castings_messages' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–∞—Ö
    if 'channels_info' not in tables:
        manager.create_table('channels_info')
    else:
        print("  - –¢–∞–±–ª–∏—Ü–∞ 'channels_info' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ '{manager.database}':")
    tables = manager.show_tables()
    for table in tables:
        count = manager.get_table_count(table)
        print(f"  - {table} ({count} –∑–∞–ø–∏—Å–µ–π)")
    
    print("\n‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == '__main__':
    main()


