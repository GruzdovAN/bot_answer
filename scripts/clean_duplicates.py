#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö ClickHouse
"""

import os
import sys
import requests
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class ClickHouseCleaner:
    def __init__(self):
        self.host = os.getenv('CLICKHOUSE_HOST', 'localhost')
        self.port = os.getenv('CLICKHOUSE_PORT', '8123')
        self.user = os.getenv('CLICKHOUSE_USER', 'clickhouse_admin')
        self.password = os.getenv('CLICKHOUSE_PASSWORD')
        self.database = os.getenv('CLICKHOUSE_DB', 'telegram_analytics')
        
        self.base_url = f"http://{self.host}:{self.port}"
        self.auth = (self.user, self.password) if self.user and self.password else None
    
    def execute_query(self, query, database=None):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞"""
        db = database or self.database
        response = requests.post(
            self.base_url,
            data=query,
            auth=self.auth,
            params={'database': db},
            timeout=10
        )
        
        if response.status_code != 200:
            raise Exception(f"ClickHouse error: {response.text}")
        
        return response.text.strip()
    
    def check_duplicates(self, table_name):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        # –î–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
        if table_name == 'castings_messages':
            query = f"""
            SELECT channel_id, message_id, COUNT(*) as count 
            FROM {table_name} 
            GROUP BY channel_id, message_id 
            HAVING count > 1
            ORDER BY count DESC
            """
        else:
            query = f"""
            SELECT channel_id, title, COUNT(*) as count 
            FROM {table_name} 
            GROUP BY channel_id, title 
            HAVING count > 1
            ORDER BY count DESC
            """
        
        try:
            result = self.execute_query(query)
            lines = result.strip().split('\n')
            
            if lines and lines[0]:
                print(f"üîç –ù–∞–π–¥–µ–Ω—ã –¥—É–±–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}:")
                total_duplicates = 0
                for line in lines:
                    if line:
                        parts = line.split('\t')
                        if len(parts) >= 3:
                            channel_id = parts[0]
                            title = parts[1]
                            count = int(parts[2])
                            duplicates = count - 1
                            total_duplicates += duplicates
                            print(f"  - {title} (ID: {channel_id}): {count} –∑–∞–ø–∏—Å–µ–π ({duplicates} –¥—É–±–ª–µ–π)")
                
                print(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π: {total_duplicates}")
                return total_duplicates
            else:
                print(f"‚úÖ –î—É–±–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥—É–±–ª–µ–π –≤ {table_name}: {e}")
            return -1
    
    def clean_duplicates(self, table_name):
        """–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ"""
        print(f"üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name}...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            temp_table = f"{table_name}_temp"
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                self.execute_query(f"DROP TABLE IF EXISTS {temp_table}")
            except:
                pass
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏
            create_temp_query = f"""
            CREATE TABLE {temp_table} AS
            SELECT DISTINCT channel_id, title, username, type, participants_count, 
                   description, is_verified, is_scam, is_fake, created_date, discovered_at
            FROM {table_name}
            """
            
            self.execute_query(create_temp_query)
            print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {temp_table} —Å–æ–∑–¥–∞–Ω–∞")
            
            # –û—á–∏—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            self.execute_query(f"TRUNCATE TABLE {table_name}")
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –æ—á–∏—â–µ–Ω–∞")
            
            # –ö–æ–ø–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ
            self.execute_query(f"INSERT INTO {table_name} SELECT * FROM {temp_table}")
            print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ {table_name}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            self.execute_query(f"DROP TABLE {temp_table}")
            print(f"‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ {temp_table} —É–¥–∞–ª–µ–Ω–∞")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–µ–π –≤ {table_name}: {e}")
            return False
    
    def get_table_stats(self, table_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü—ã"""
        try:
            count = self.execute_query(f"SELECT COUNT(*) FROM {table_name}")
            print(f"üìã {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
            return int(count)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {table_name}: {e}")
            return 0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –û–ß–ò–°–¢–ö–ê –î–£–ë–õ–ï–ô –í CLICKHOUSE")
    print("=" * 50)
    
    cleaner = ClickHouseCleaner()
    
    # –¢–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    tables = ['channels_info', 'castings_channels', 'castings_messages']
    
    print("üìä –¢–ï–ö–£–©–ï–ï –°–û–°–¢–û–Ø–ù–ò–ï –¢–ê–ë–õ–ò–¶:")
    print("-" * 30)
    
    total_duplicates = 0
    for table in tables:
        cleaner.get_table_stats(table)
        duplicates = cleaner.check_duplicates(table)
        if duplicates > 0:
            total_duplicates += duplicates
        print()
    
    if total_duplicates == 0:
        print("‚úÖ –î—É–±–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤–æ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö!")
        return
    
    print(f"üîç –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—É–±–ª–µ–π: {total_duplicates}")
    print()
    
    # –û—á–∏—â–∞–µ–º –¥—É–±–ª–∏
    print("üßπ –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£ –î–£–ë–õ–ï–ô:")
    print("-" * 30)
    
    for table in tables:
        duplicates = cleaner.check_duplicates(table)
        if duplicates > 0:
            success = cleaner.clean_duplicates(table)
            if success:
                print(f"‚úÖ –î—É–±–ª–∏ –≤ {table} –æ—á–∏—â–µ–Ω—ã")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥—É–±–ª–∏ –≤ {table}")
            print()
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("üìä –§–ò–ù–ê–õ–¨–ù–û–ï –°–û–°–¢–û–Ø–ù–ò–ï:")
    print("-" * 20)
    
    for table in tables:
        cleaner.get_table_stats(table)
        cleaner.check_duplicates(table)
        print()

if __name__ == '__main__':
    main()
