#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö Telegram —Å–µ—Å—Å–∏–π
"""

import asyncio
import os
import sys
from telethon import TelegramClient
from dotenv import load_dotenv

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

async def check_session(session_path, api_id, api_hash):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏"""
    try:
        client = TelegramClient(session_path, int(api_id), api_hash)
        await client.start()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
        me = await client.get_me()
        await client.disconnect()
        
        return {
            'session': session_path,
            'status': 'active',
            'user': f"{me.first_name} {me.last_name or ''}".strip(),
            'username': me.username or '–ù–µ—Ç username',
            'phone': me.phone or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
        }
    except Exception as e:
        return {
            'session': session_path,
            'status': 'error',
            'error': str(e)
        }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    api_id = os.getenv('API_ID_TG')
    api_hash = os.getenv('API_HASH_TG')
    
    if not all([api_id, api_hash]):
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API_ID_TG –∏ API_HASH_TG –≤ .env —Ñ–∞–π–ª–µ")
        return
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    sessions_dir = 'sessions'
    session_files = []
    
    if os.path.exists(sessions_dir):
        for file in os.listdir(sessions_dir):
            if file.endswith('.session'):
                session_path = os.path.join(sessions_dir, file[:-8])  # –£–±–∏—Ä–∞–µ–º .session
                session_files.append(session_path)
    
    if not session_files:
        print("üìÅ –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ sessions/")
        return
    
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Telegram —Å–µ—Å—Å–∏–π...")
    print("=" * 60)
    
    active_sessions = []
    
    for session_path in session_files:
        print(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º: {session_path}")
        result = await check_session(session_path, api_id, api_hash)
        
        if result['status'] == 'active':
            print(f"‚úÖ {result['session']}")
            print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {result['user']}")
            print(f"   Username: @{result['username']}")
            print(f"   –¢–µ–ª–µ—Ñ–æ–Ω: {result['phone']}")
            active_sessions.append(result)
        else:
            print(f"‚ùå {result['session']}")
            print(f"   –û—à–∏–±–∫–∞: {result['error']}")
        
        print("-" * 40)
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {len(active_sessions)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –∏–∑ {len(session_files)}")
    
    if active_sessions:
        print("\nüéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        for session in active_sessions:
            print(f"   - {session['session']} ({session['user']})")
    
    return active_sessions

if __name__ == '__main__':
    asyncio.run(main())
